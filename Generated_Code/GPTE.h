/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : GPTE.h
**     Project     : ProcessorExpert
**     Processor   : MKL26Z256VLH4
**     Component   : GPIO_LDD
**     Version     : Component 01.128, Driver 01.06, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2017-04-13, 23:37, # CodeGen: 55
**     Abstract    :
**         The HAL GPIO component will provide a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL GPIO API will be simpler and more
**         portable to various microprocessors.
**     Settings    :
**          Component name                                 : GPTE
**          Port                                           : PTE
**          Port width                                     : 32 bits
**          Mask of allocated pins                         : E0000000
**          Interrupt service/event                        : Disabled
**          Bit fields                                     : 3
**            Bit field                                    : 
**              Field name                                 : PTE29_PWR_OFF
**              Pins                                       : 1
**                Pin                                      : 
**                  Pin                                    : CMP0_IN5/ADC0_SE4b/PTE29/TPM0_CH2/TPM_CLKIN0
**                  Pin signal                             : 
**                  Initial pin direction                  : Output
**                    Initial output state                 : 0
**                  Initial pin event                      : Disabled
**            Bit field                                    : 
**              Field name                                 : PTE30_GSM_RESETB
**              Pins                                       : 1
**                Pin                                      : 
**                  Pin                                    : DAC0_OUT/ADC0_SE23/CMP0_IN4/PTE30/TPM0_CH3/TPM_CLKIN1
**                  Pin signal                             : 
**                  Initial pin direction                  : Output
**                    Initial output state                 : 0
**                  Initial pin event                      : Disabled
**            Bit field                                    : 
**              Field name                                 : PTE31_GSM_ON_IND
**              Pins                                       : 1
**                Pin                                      : 
**                  Pin                                    : PTE31/TPM0_CH4
**                  Pin signal                             : 
**                  Initial pin direction                  : Input
**                  Initial pin event                      : Disabled
**          Initialization                                 : 
**            Auto initialization                          : yes
**            Event mask                                   : 
**              OnPortEvent                                : Disabled
**     Contents    :
**         Init            - LDD_TDeviceData* GPTE_Init(LDD_TUserData *UserDataPtr);
**         SetFieldValue   - void GPTE_SetFieldValue(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**         GetFieldValue   - GPTE_TFieldValue GPTE_GetFieldValue(LDD_TDeviceData *DeviceDataPtr,...
**         ClearFieldBits  - void GPTE_ClearFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**         SetFieldBits    - void GPTE_SetFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**         ToggleFieldBits - void GPTE_ToggleFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField...
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file GPTE.h
** @version 01.06
** @brief
**         The HAL GPIO component will provide a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL GPIO API will be simpler and more
**         portable to various microprocessors.
*/         
/*!
**  @addtogroup GPTE_module GPTE module documentation
**  @{
*/         

#ifndef __GPTE_H
#define __GPTE_H

/* MODULE GPTE. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "IO_Map.h"
#include "GPIO_PDD.h"
#include "PORT_PDD.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define GPTE_PRPH_BASE_ADDRESS  0x400FF100U
  
/*! Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define GPTE_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_GPTE_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define GPTE_Init_METHOD_ENABLED       /*!< Init method of the component GPTE is enabled (generated) */
#define GPTE_SetFieldValue_METHOD_ENABLED /*!< SetFieldValue method of the component GPTE is enabled (generated) */
#define GPTE_GetFieldValue_METHOD_ENABLED /*!< GetFieldValue method of the component GPTE is enabled (generated) */
#define GPTE_ClearFieldBits_METHOD_ENABLED /*!< ClearFieldBits method of the component GPTE is enabled (generated) */
#define GPTE_SetFieldBits_METHOD_ENABLED /*!< SetFieldBits method of the component GPTE is enabled (generated) */
#define GPTE_ToggleFieldBits_METHOD_ENABLED /*!< ToggleFieldBits method of the component GPTE is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */

/* Definition of bit field constants */
#define PTE29_PWR_OFF ((LDD_GPIO_TBitField)0)
#define PTE30_GSM_RESETB ((LDD_GPIO_TBitField)1)
#define PTE31_GSM_ON_IND ((LDD_GPIO_TBitField)2)

/* Definition of implementation constants */
#define GPTE_ALLOCATED_PINS_MASK 0xE0000000U /*!< Mask of all allocated pins from the port */
#define GPTE_MODULE_BASE_ADDRESS FPTE_BASE_PTR /*!< Name of macro used as the base address */
#define GPTE_PORTCONTROL_BASE_ADDRESS PORTE_BASE_PTR /*!< Name of macro used as the base address */
#define GPTE_AVAILABLE_EVENTS_MASK 0x00U /*!< Mask of all available events */
#define GPTE_FIELD_0_PIN_0 LDD_GPIO_PIN_29 /*!< Constant for the pin in the field used in the method ConnectPin */
#define GPTE_FIELD_1_PIN_0 LDD_GPIO_PIN_30 /*!< Constant for the pin in the field used in the method ConnectPin */
#define GPTE_FIELD_2_PIN_0 LDD_GPIO_PIN_31 /*!< Constant for the pin in the field used in the method ConnectPin */
#define GPTE_PTE29_PWR_OFF_START_BIT 29u /*!< Index of the starting bit of the bit field (0 represents LSB) */
#define GPTE_PTE29_PWR_OFF_MASK 0x20000000u /*!< Mask of the bits allocated by the bit field (within the port) */
#define GPTE_PTE30_GSM_RESETB_START_BIT 30u /*!< Index of the starting bit of the bit field (0 represents LSB) */
#define GPTE_PTE30_GSM_RESETB_MASK 0x40000000u /*!< Mask of the bits allocated by the bit field (within the port) */
#define GPTE_PTE31_GSM_ON_IND_START_BIT 31u /*!< Index of the starting bit of the bit field (0 represents LSB) */
#define GPTE_PTE31_GSM_ON_IND_MASK 0x80000000u /*!< Mask of the bits allocated by the bit field (within the port) */
/* Representation of unaligned data value of the port.
   Unsigned integer of proper width depending on the size of the GPIO port allocated.
   Typically the value of n-th bit represents the data for the n-th pin within the port.
   Such value is not abstracted from the physical position of the bits within the port. */
typedef uint32_t GPTE_TPortValue;

/* Representation of right-aligned data value of the bit field.
   Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port).
   There are used only so many lowest bits, as it is denoted by the width of the bit field.
   Such value is abstracted from the physical position of the bit field pins within the port.
   Equals to the type <compId>_TPortValue. */
typedef GPTE_TPortValue GPTE_TFieldValue;



/*
** ===================================================================
**     Method      :  GPTE_Init (component GPIO_LDD)
*/
/*!
**     @brief
**         This method initializes the associated peripheral(s) and the
**         component internal variables. The method is called
**         automatically as a part of the application initialization
**         code.
**     @param
**         UserDataPtr     - Pointer to the RTOS device
**                           structure. This pointer will be passed to
**                           all events as parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* GPTE_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  GPTE_SetFieldValue (component GPIO_LDD)
*/
/*!
**     @brief
**         This method sets the output data value of the specified bit
**         field.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @param
**         Value           - Aligned data value to writting to the
**                           specified bit field. The bit 0 corresponds
**                           with the pin which has index 0 within the
**                           given bit field, the bit 1 corresponds with
**                           the pin which has index 1 within the given
**                           bit field, etc.
*/
/* ===================================================================*/
void GPTE_SetFieldValue(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPTE_TFieldValue Value);

/*
** ===================================================================
**     Method      :  GPTE_GetFieldValue (component GPIO_LDD)
*/
/*!
**     @brief
**         This method returns the current input data of the specified
**         field.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Field           - Bit field to reading. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @return
**                         - Aligned current port input value masked for
**                           allocated pins of the field. The bit 0
**                           corresponds with the pin which has index 0
**                           within the given bit field, the bit 1
**                           corresponds with the pin which has index 1
**                           within the given bit field, etc.
*/
/* ===================================================================*/
GPTE_TFieldValue GPTE_GetFieldValue(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field);

/*
** ===================================================================
**     Method      :  GPTE_ClearFieldBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method drives the specified bits of the specified bit
**         field to the inactive level.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @param
**         Mask            - Aligned mask of bits to setting the
**                           inactive level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
*/
/* ===================================================================*/
void GPTE_ClearFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPTE_TFieldValue Mask);

/*
** ===================================================================
**     Method      :  GPTE_SetFieldBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method drives the specified bits of the specified bit
**         field to the active level.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @param
**         Mask            - Aligned mask of bits to setting the
**                           active level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
*/
/* ===================================================================*/
void GPTE_SetFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPTE_TFieldValue Mask);

/*
** ===================================================================
**     Method      :  GPTE_ToggleFieldBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method inverts the specified bits of the specified bit
**         field to other level.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         Field           - Bit field to write. Bit fields are
**                           defined during design time and for each bit
**                           field there is a generated constant.
**     @param
**         Mask            - Aligned mask of bits to inverting the
**                           current level. Each field pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the given
**                           bit field, the bit 1 corresponds with the
**                           pin which has index 1 within the given bit
**                           field, etc.
*/
/* ===================================================================*/
void GPTE_ToggleFieldBits(LDD_TDeviceData *DeviceDataPtr, LDD_GPIO_TBitField Field, GPTE_TFieldValue Mask);

/* END GPTE. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __GPTE_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.2 [05.06]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
